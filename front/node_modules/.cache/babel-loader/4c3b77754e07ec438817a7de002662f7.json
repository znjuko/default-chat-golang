{"ast":null,"code":"import API from '../utils/API';\nexport default async function connectSocket() {\n  try {\n    let res = await API.get('/ws', {\n      params: {\n        results: 1,\n        inc: 'token'\n      }\n    });\n    let token = res.data.token;\n    console.log(res);\n    window.socket = new WebSocket(`ws://localhost:3000/ws/${token}`);\n\n    window.socket.onopen = function (e) {\n      console.log('[WS] Соединение установлено');\n    };\n\n    window.socket.onclose = function (event) {\n      if (event.wasClean) {\n        console.log(`[WS] Соединение закрыто чисто, код=${event.code} причина=${event.reason}`);\n      } else {\n        connectSocket();\n        console.log('[WS] Соединение прервано');\n      }\n    };\n\n    window.socket.onerror = function (error) {\n      console.error(`[WS] ${error.message}`);\n    };\n  } catch (err) {\n    console.error(`[WS] ${err}`);\n  }\n}","map":{"version":3,"sources":["/home/znjuko/Рабочий стол/rk2/bmstu_front/default-chat-golang/front/src/utils/Socket.js"],"names":["API","connectSocket","res","get","params","results","inc","token","data","console","log","window","socket","WebSocket","onopen","e","onclose","event","wasClean","code","reason","onerror","error","message","err"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AAEA,eAAe,eAAeC,aAAf,GAA+B;AAC7C,MAAI;AACH,QAAIC,GAAG,GAAG,MAAMF,GAAG,CAACG,GAAJ,CAAQ,KAAR,EAAe;AAC9BC,MAAAA,MAAM,EAAE;AACPC,QAAAA,OAAO,EAAE,CADF;AAEPC,QAAAA,GAAG,EAAE;AAFE;AADsB,KAAf,CAAhB;AAMA,QAAIC,KAAK,GAAGL,GAAG,CAACM,IAAJ,CAASD,KAArB;AAEAE,IAAAA,OAAO,CAACC,GAAR,CAAYR,GAAZ;AACAS,IAAAA,MAAM,CAACC,MAAP,GAAgB,IAAIC,SAAJ,CAAe,0BAAyBN,KAAM,EAA9C,CAAhB;;AAEAI,IAAAA,MAAM,CAACC,MAAP,CAAcE,MAAd,GAAuB,UAAUC,CAAV,EAAa;AACnCN,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,KAFD;;AAIAC,IAAAA,MAAM,CAACC,MAAP,CAAcI,OAAd,GAAwB,UAAUC,KAAV,EAAiB;AACxC,UAAIA,KAAK,CAACC,QAAV,EAAoB;AACnBT,QAAAA,OAAO,CAACC,GAAR,CACE,sCAAqCO,KAAK,CAACE,IAAK,YAAWF,KAAK,CAACG,MAAO,EAD1E;AAGA,OAJD,MAIO;AACNnB,QAAAA,aAAa;AACbQ,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA;AACD,KATD;;AAWAC,IAAAA,MAAM,CAACC,MAAP,CAAcS,OAAd,GAAwB,UAAUC,KAAV,EAAiB;AACxCb,MAAAA,OAAO,CAACa,KAAR,CAAe,QAAOA,KAAK,CAACC,OAAQ,EAApC;AACA,KAFD;AAGA,GA9BD,CA8BE,OAAOC,GAAP,EAAY;AACbf,IAAAA,OAAO,CAACa,KAAR,CAAe,QAAOE,GAAI,EAA1B;AACA;AACD","sourcesContent":["import API from '../utils/API';\n\nexport default async function connectSocket() {\n\ttry {\n\t\tlet res = await API.get('/ws', {\n\t\t\tparams: {\n\t\t\t\tresults: 1,\n\t\t\t\tinc: 'token',\n\t\t\t},\n\t\t});\n\t\tlet token = res.data.token;\n\n\t\tconsole.log(res);\n\t\twindow.socket = new WebSocket(`ws://localhost:3000/ws/${token}`);\n\n\t\twindow.socket.onopen = function (e) {\n\t\t\tconsole.log('[WS] Соединение установлено');\n\t\t};\n\n\t\twindow.socket.onclose = function (event) {\n\t\t\tif (event.wasClean) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`[WS] Соединение закрыто чисто, код=${event.code} причина=${event.reason}`,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconnectSocket();\n\t\t\t\tconsole.log('[WS] Соединение прервано');\n\t\t\t}\n\t\t};\n\n\t\twindow.socket.onerror = function (error) {\n\t\t\tconsole.error(`[WS] ${error.message}`);\n\t\t};\n\t} catch (err) {\n\t\tconsole.error(`[WS] ${err}`);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}