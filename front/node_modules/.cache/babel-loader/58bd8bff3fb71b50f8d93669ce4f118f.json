{"ast":null,"code":"var nameToIDs = function (name) {\n  return name.split('.').reduce(function (ids, name) {\n    return ids.concat(ids.length ? ids[ids.length - 1] + '.' + name : name);\n  }, []);\n};\n\nvar exists = function (val) {\n  return val !== undefined && val !== null;\n};\n\nvar hasMetaParams = function (state) {\n  return state && state.meta && state.meta.params;\n};\n\nvar extractSegmentParams = function (name, state) {\n  if (!hasMetaParams(state) || !exists(state.meta.params[name])) return {};\n  return Object.keys(state.meta.params[name]).reduce(function (params, p) {\n    params[p] = state.params[p];\n    return params;\n  }, {});\n};\n\nfunction transitionPath(toState, fromState) {\n  var toStateOptions = toState.meta && toState.meta && toState.meta.options || {};\n  var fromStateIds = fromState ? nameToIDs(fromState.name) : [];\n  var toStateIds = nameToIDs(toState.name);\n  var maxI = Math.min(fromStateIds.length, toStateIds.length);\n\n  function pointOfDifference() {\n    var i;\n\n    var _loop_1 = function () {\n      var left = fromStateIds[i];\n      var right = toStateIds[i];\n      if (left !== right) return {\n        value: i\n      };\n      var leftParams = extractSegmentParams(left, toState);\n      var rightParams = extractSegmentParams(right, fromState);\n      if (Object.keys(leftParams).length !== Object.keys(rightParams).length) return {\n        value: i\n      };\n      if (Object.keys(leftParams).length === 0) return \"continue\";\n      var different = Object.keys(leftParams).some(function (p) {\n        return rightParams[p] !== leftParams[p];\n      });\n\n      if (different) {\n        return {\n          value: i\n        };\n      }\n    };\n\n    for (i = 0; i < maxI; i += 1) {\n      var state_1 = _loop_1();\n\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n\n    return i;\n  }\n\n  var i;\n\n  if (!fromState || toStateOptions.reload) {\n    i = 0;\n  } else if (!hasMetaParams(fromState) && !hasMetaParams(toState)) {\n    i = 0;\n  } else {\n    i = pointOfDifference();\n  }\n\n  var toDeactivate = fromStateIds.slice(i).reverse();\n  var toActivate = toStateIds.slice(i);\n  var intersection = fromState && i > 0 ? fromStateIds[i - 1] : '';\n  return {\n    intersection: intersection,\n    toDeactivate: toDeactivate,\n    toActivate: toActivate\n  };\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n}\n\nfunction shouldUpdateNode(nodeName) {\n  return function (toState, fromSate) {\n    var _a = transitionPath(toState, fromSate),\n        intersection = _a.intersection,\n        toActivate = _a.toActivate,\n        toDeactivateReversed = _a.toDeactivate;\n\n    var toDeactivate = __spreadArrays(toDeactivateReversed).reverse();\n\n    if (toState.meta.options && toState.meta.options.reload) {\n      return true;\n    }\n\n    if (nodeName === intersection) {\n      return true;\n    }\n\n    if (toActivate.indexOf(nodeName) === -1) {\n      return false;\n    }\n\n    var matching = true;\n\n    for (var i = 0; i < toActivate.length; i += 1) {\n      var activatedSegment = toActivate[i];\n      var sameLevelDeactivatedSegment = toDeactivate[i];\n      matching = activatedSegment === sameLevelDeactivatedSegment;\n\n      if (matching && activatedSegment === nodeName) {\n        return true;\n      }\n\n      if (!matching) {\n        return false;\n      }\n    }\n\n    return false;\n  };\n}\n\nexport default transitionPath;\nexport { nameToIDs, shouldUpdateNode };","map":{"version":3,"sources":["/home/znjuko/Рабочий стол/rk2/bmstu_front/default-chat-golang/front/node_modules/router5-transition-path/dist/index.es.js"],"names":["nameToIDs","name","split","reduce","ids","concat","length","exists","val","undefined","hasMetaParams","state","meta","params","extractSegmentParams","Object","keys","p","transitionPath","toState","fromState","toStateOptions","options","fromStateIds","toStateIds","maxI","Math","min","pointOfDifference","i","_loop_1","left","right","value","leftParams","rightParams","different","some","state_1","reload","toDeactivate","slice","reverse","toActivate","intersection","__spreadArrays","s","il","arguments","r","Array","k","a","j","jl","shouldUpdateNode","nodeName","fromSate","_a","toDeactivateReversed","indexOf","matching","activatedSegment","sameLevelDeactivatedSegment"],"mappings":"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","sourcesContent":["var nameToIDs = function (name) {\r\n    return name\r\n        .split('.')\r\n        .reduce(function (ids, name) {\r\n        return ids.concat(ids.length ? ids[ids.length - 1] + '.' + name : name);\r\n    }, []);\r\n};\r\nvar exists = function (val) { return val !== undefined && val !== null; };\r\nvar hasMetaParams = function (state) { return state && state.meta && state.meta.params; };\r\nvar extractSegmentParams = function (name, state) {\r\n    if (!hasMetaParams(state) || !exists(state.meta.params[name]))\r\n        return {};\r\n    return Object.keys(state.meta.params[name]).reduce(function (params, p) {\r\n        params[p] = state.params[p];\r\n        return params;\r\n    }, {});\r\n};\r\nfunction transitionPath(toState, fromState) {\r\n    var toStateOptions = (toState.meta && toState.meta && toState.meta.options) || {};\r\n    var fromStateIds = fromState ? nameToIDs(fromState.name) : [];\r\n    var toStateIds = nameToIDs(toState.name);\r\n    var maxI = Math.min(fromStateIds.length, toStateIds.length);\r\n    function pointOfDifference() {\r\n        var i;\r\n        var _loop_1 = function () {\r\n            var left = fromStateIds[i];\r\n            var right = toStateIds[i];\r\n            if (left !== right)\r\n                return { value: i };\r\n            var leftParams = extractSegmentParams(left, toState);\r\n            var rightParams = extractSegmentParams(right, fromState);\r\n            if (Object.keys(leftParams).length !==\r\n                Object.keys(rightParams).length)\r\n                return { value: i };\r\n            if (Object.keys(leftParams).length === 0)\r\n                return \"continue\";\r\n            var different = Object.keys(leftParams).some(function (p) { return rightParams[p] !== leftParams[p]; });\r\n            if (different) {\r\n                return { value: i };\r\n            }\r\n        };\r\n        for (i = 0; i < maxI; i += 1) {\r\n            var state_1 = _loop_1();\r\n            if (typeof state_1 === \"object\")\r\n                return state_1.value;\r\n        }\r\n        return i;\r\n    }\r\n    var i;\r\n    if (!fromState || toStateOptions.reload) {\r\n        i = 0;\r\n    }\r\n    else if (!hasMetaParams(fromState) && !hasMetaParams(toState)) {\r\n        i = 0;\r\n    }\r\n    else {\r\n        i = pointOfDifference();\r\n    }\r\n    var toDeactivate = fromStateIds.slice(i).reverse();\r\n    var toActivate = toStateIds.slice(i);\r\n    var intersection = fromState && i > 0 ? fromStateIds[i - 1] : '';\r\n    return {\r\n        intersection: intersection,\r\n        toDeactivate: toDeactivate,\r\n        toActivate: toActivate\r\n    };\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\n\nfunction shouldUpdateNode(nodeName) {\r\n    return function (toState, fromSate) {\r\n        var _a = transitionPath(toState, fromSate), intersection = _a.intersection, toActivate = _a.toActivate, toDeactivateReversed = _a.toDeactivate;\r\n        var toDeactivate = __spreadArrays(toDeactivateReversed).reverse();\r\n        if (toState.meta.options && toState.meta.options.reload) {\r\n            return true;\r\n        }\r\n        if (nodeName === intersection) {\r\n            return true;\r\n        }\r\n        if (toActivate.indexOf(nodeName) === -1) {\r\n            return false;\r\n        }\r\n        var matching = true;\r\n        for (var i = 0; i < toActivate.length; i += 1) {\r\n            var activatedSegment = toActivate[i];\r\n            var sameLevelDeactivatedSegment = toDeactivate[i];\r\n            matching = activatedSegment === sameLevelDeactivatedSegment;\r\n            if (matching && activatedSegment === nodeName) {\r\n                return true;\r\n            }\r\n            if (!matching) {\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n}\n\nexport default transitionPath;\nexport { nameToIDs, shouldUpdateNode };\n"]},"metadata":{},"sourceType":"module"}